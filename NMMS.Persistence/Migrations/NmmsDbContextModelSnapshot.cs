// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NMMS.Persistence.Entities;

#nullable disable

namespace NMMS.Persistence.Migrations
{
    [DbContext(typeof(NmmsDbContext))]
    partial class NmmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.AddressTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddressType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ფაქტიური მისამართი"
                        },
                        new
                        {
                            Id = 2,
                            Name = "რეგისტრაციის მისამართი"
                        });
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.ContactTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ტელეფონი"
                        },
                        new
                        {
                            Id = 2,
                            Name = "მობილური"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ელ.ფოსტა"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ფაქსი"
                        });
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.Distributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("A date and time the file was created.");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistributorLevelId")
                        .HasColumnType("int");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Distributors FirstName");

                    b.Property<int>("IdentificationInformationId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Distributors LastName");

                    b.Property<int>("RecommendatorDistributorId")
                        .HasColumnType("int");

                    b.Property<int>("RecommendedDistributorCount")
                        .HasColumnType("int");

                    b.Property<int>("RecommendedDistributorOverAllCount")
                        .HasColumnType("int");

                    b.Property<int>("SexTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.HasIndex("FileId")
                        .IsUnique()
                        .HasFilter("[FileId] IS NOT NULL");

                    b.HasIndex("IdentificationInformationId")
                        .IsUnique();

                    b.HasIndex("SexTypeId");

                    b.ToTable("Distributors", (string)null);
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.DistributorLevelTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DistributorLevelTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "დონე 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "დონე 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "დონე 3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "დონე 4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "დონე 5"
                        });
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.DocumentTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "პირადობის მოწმობა"
                        },
                        new
                        {
                            Id = 2,
                            Name = "პასპორტი"
                        });
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.IdentificationInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DocumentSeries")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("DocumentTerms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("A date and time the file was created.");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IssuingCompany")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ReleaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("A date and time the file was created.");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("IdentificationInformations", (string)null);
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.SexTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SexTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "მამრობითი"
                        },
                        new
                        {
                            Id = 2,
                            Name = "მდედრობითი"
                        });
                });

            modelBuilder.Entity("NMMS.Domain.Entities.Files.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("A date and time the file was created.");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime")
                        .HasComment("A date and time the file was deleted.");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("An extension of the file.");

                    b.Property<int?>("FileNameSufixNumber")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasComment("A sufix of the file.");

                    b.Property<long>("LengthInBytes")
                        .HasColumnType("bigint")
                        .HasComment("A size of the file in bytes.");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("A MIME type of the file.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)")
                        .HasComment("A name of the file.");

                    b.Property<string>("PhysicalPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("A physical path of the file.");

                    b.HasKey("Id");

                    b.ToTable("File", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("09e8bd30-6128-4a7f-a894-1bb030721fc2"),
                            DateCreated = new DateTime(2022, 12, 13, 18, 55, 42, 49, DateTimeKind.Local).AddTicks(6856),
                            Extension = "jpg",
                            LengthInBytes = 10803564L,
                            MimeType = "image/jpeg",
                            Name = "DefaultFile",
                            PhysicalPath = "D:\\NMMSFiles\\09e8bd30-6128-4a7f-a894-1bb030721fc2"
                        });
                });

            modelBuilder.Entity("NMMS.Domain.Entities.Product.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = new Guid("703e196a-9706-4668-8f84-92693ef7cfa9"),
                            Name = "კალამი",
                            UnitPrice = 0.10000000000000001
                        },
                        new
                        {
                            Id = 2,
                            Code = new Guid("73636f7f-e03d-4973-8ee3-258e444bc7dc"),
                            Name = "ფანქარი",
                            UnitPrice = 0.10000000000000001
                        },
                        new
                        {
                            Id = 3,
                            Code = new Guid("d8c14b4e-f579-438c-b4bd-63995632a768"),
                            Name = "ქაღალდი",
                            UnitPrice = 10.0
                        },
                        new
                        {
                            Id = 4,
                            Code = new Guid("d0a5f9f3-6ea6-435b-82a6-253611b988c3"),
                            Name = "მაკრატელი",
                            UnitPrice = 5.0
                        },
                        new
                        {
                            Id = 5,
                            Code = new Guid("5a2f44be-6b8c-4ddc-8c03-36eaba86d48d"),
                            Name = "ფლომასტერი",
                            UnitPrice = 2.5
                        });
                });

            modelBuilder.Entity("NMMS.Domain.Entities.ProductSale.ProductSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DistributorId")
                        .HasColumnType("int");

                    b.Property<double>("OverAllPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SellDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductSales", (string)null);
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.Address", b =>
                {
                    b.HasOne("NMMS.Domain.Entities.DistributorEntity.AddressTypes", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .IsRequired();

                    b.Navigation("AddressType");
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.Contact", b =>
                {
                    b.HasOne("NMMS.Domain.Entities.DistributorEntity.ContactTypes", "ContactType")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactTypeId")
                        .IsRequired();

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.Distributor", b =>
                {
                    b.HasOne("NMMS.Domain.Entities.DistributorEntity.Address", "Address")
                        .WithOne("Distributor")
                        .HasForeignKey("NMMS.Domain.Entities.DistributorEntity.Distributor", "AddressId")
                        .IsRequired();

                    b.HasOne("NMMS.Domain.Entities.DistributorEntity.Contact", "Contact")
                        .WithOne("Distributor")
                        .HasForeignKey("NMMS.Domain.Entities.DistributorEntity.Distributor", "ContactId")
                        .IsRequired();

                    b.HasOne("NMMS.Domain.Entities.Files.File", "File")
                        .WithOne("Distributor")
                        .HasForeignKey("NMMS.Domain.Entities.DistributorEntity.Distributor", "FileId");

                    b.HasOne("NMMS.Domain.Entities.DistributorEntity.IdentificationInformation", "IdentificationInformation")
                        .WithOne("Distributor")
                        .HasForeignKey("NMMS.Domain.Entities.DistributorEntity.Distributor", "IdentificationInformationId")
                        .IsRequired();

                    b.HasOne("NMMS.Domain.Entities.DistributorEntity.DistributorLevelTypes", "DistributorLevelType")
                        .WithMany("Distributors")
                        .HasForeignKey("SexTypeId")
                        .IsRequired();

                    b.HasOne("NMMS.Domain.Entities.DistributorEntity.SexTypes", "SexTypes")
                        .WithMany("Distributors")
                        .HasForeignKey("SexTypeId")
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Contact");

                    b.Navigation("DistributorLevelType");

                    b.Navigation("File");

                    b.Navigation("IdentificationInformation");

                    b.Navigation("SexTypes");
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.IdentificationInformation", b =>
                {
                    b.HasOne("NMMS.Domain.Entities.DistributorEntity.DocumentTypes", "DocumentTypes")
                        .WithMany("IdentificationInformations")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired();

                    b.Navigation("DocumentTypes");
                });

            modelBuilder.Entity("NMMS.Domain.Entities.ProductSale.ProductSales", b =>
                {
                    b.HasOne("NMMS.Domain.Entities.DistributorEntity.Distributor", "Distributor")
                        .WithMany("ProductSales")
                        .HasForeignKey("ProductsId")
                        .IsRequired();

                    b.HasOne("NMMS.Domain.Entities.Product.Products", "Products")
                        .WithMany("ProductSales")
                        .HasForeignKey("ProductsId")
                        .IsRequired();

                    b.Navigation("Distributor");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.Address", b =>
                {
                    b.Navigation("Distributor")
                        .IsRequired();
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.AddressTypes", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.Contact", b =>
                {
                    b.Navigation("Distributor")
                        .IsRequired();
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.ContactTypes", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.Distributor", b =>
                {
                    b.Navigation("ProductSales");
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.DistributorLevelTypes", b =>
                {
                    b.Navigation("Distributors");
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.DocumentTypes", b =>
                {
                    b.Navigation("IdentificationInformations");
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.IdentificationInformation", b =>
                {
                    b.Navigation("Distributor")
                        .IsRequired();
                });

            modelBuilder.Entity("NMMS.Domain.Entities.DistributorEntity.SexTypes", b =>
                {
                    b.Navigation("Distributors");
                });

            modelBuilder.Entity("NMMS.Domain.Entities.Files.File", b =>
                {
                    b.Navigation("Distributor")
                        .IsRequired();
                });

            modelBuilder.Entity("NMMS.Domain.Entities.Product.Products", b =>
                {
                    b.Navigation("ProductSales");
                });
#pragma warning restore 612, 618
        }
    }
}
